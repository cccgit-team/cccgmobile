import { HTTP } from '@ionic-native/http/ngx';
export declare class BasicInfoService {
    httpClient: HTTP;
    retryOptions: {
        maxRedirects: number;
        maxRetries: number;
        maxReconnects: number;
        backoff: {
            inc: number;
            max: number;
        };
    };
    constructor(httpClient: HTTP);
    getBasicInfo(id: any, options: any): Promise<any>;
    parseFormats(playerResponse: any): any[];
    /**
     * Goes through each endpoint in the pipeline, retrying on failure if the error is recoverable.
     * If unable to succeed with one endpoint, moves onto the next one.
     *
     * @param {Array.<Object>} args
     * @param {Function} validate
     * @param {Object} retryOptions
     * @param {Array.<Function>} endpoints
     * @returns {[Object, Object, Object]}
     */
    pipeline(args: any, retryOptions: any, endpoints: any, httpClient: any): Promise<any>;
    /**
     * Given a function, calls it with `args` until it's successful,
     * or until it encounters an unrecoverable error.
     * Currently, any error from miniget is considered unrecoverable. Errors such as
     * too many redirects, invalid URL, status code 404, status code 502.
     *
     * @param {Function} func
     * @param {Array.<Object>} args
     * @param {Object} options
     * @param {number} options.maxRetries
     * @param {Object} options.backoff
     * @param {number} options.backoff.inc
     */
    retryFunc(func: any, args: any, retryOptions: any, httpClient: any): Promise<any>;
    /**
     * Like Object.assign(), but ignores `null` and `undefined` from `source`.
     *
     * @param {Object} target
     * @param {Object} source
     * @returns {Object}
     */
    assign(target: any, source: any): any;
}
