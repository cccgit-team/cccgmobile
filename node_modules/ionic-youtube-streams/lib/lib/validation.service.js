"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationService = void 0;
var unrecoverable_error_1 = require("./errors/unrecoverable-error");
var ValidationService = /** @class */ (function () {
    function ValidationService() {
    }
    /*
      Validation
     */
    ValidationService.prototype.validate = function (info) {
        var playErr = this.playError(info.player_response, ['ERROR']);
        var privateErr = this.privateVideoError(info.player_response);
        if (playErr || privateErr) {
            throw playErr || privateErr;
        }
        return info && (info.player_response.streamingData || this.isRental(info.player_response) || this.isNotYetBroadcasted(info.player_response));
    };
    // tslint:disable-next-line:variable-name
    ValidationService.prototype.playError = function (player_response, statuses) {
        var playability = player_response && player_response.playabilityStatus;
        if (playability && statuses.includes(playability.status)) {
            return new Error(playability.reason || (playability.messages && playability.messages[0]));
        }
        return null;
    };
    // tslint:disable-next-line:variable-name
    ValidationService.prototype.privateVideoError = function (player_response) {
        var playability = player_response && player_response.playabilityStatus;
        if (playability && playability.status === 'LOGIN_REQUIRED' && playability.messages &&
            playability.messages.filter(function (m) { return /This is a private video/.test(m); }).length) {
            return new unrecoverable_error_1.UnrecoverableError(playability.reason || (playability.messages && playability.messages[0]));
        }
        else {
            return null;
        }
    };
    // tslint:disable-next-line:variable-name
    ValidationService.prototype.isRental = function (player_response) {
        var playability = player_response.playabilityStatus;
        return playability && playability.status === 'UNPLAYABLE' &&
            playability.errorScreen && playability.errorScreen.playerLegacyDesktopYpcOfferRenderer;
    };
    // tslint:disable-next-line:variable-name
    ValidationService.prototype.isNotYetBroadcasted = function (player_response) {
        var playability = player_response.playabilityStatus;
        return playability && playability.status === 'LIVE_STREAM_OFFLINE';
    };
    return ValidationService;
}());
exports.ValidationService = ValidationService;
