"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilsService = void 0;
var jsonClosingChars = /^[)\]}'\s]+/;
var VIDEO_URL = 'https://www.youtube.com/watch?v=';
var UtilsService = /** @class */ (function () {
    function UtilsService() {
        this.VIDEO_URL = VIDEO_URL;
    }
    UtilsService.prototype.getHTMLWatchURL = function (id) {
        var params = '&hl=en';
        return VIDEO_URL + id + params;
    };
    ;
    UtilsService.prototype.findPlayerResponse = function (source, info) {
        // tslint:disable-next-line:variable-name
        var player_response = info && ((info.args && info.args.player_response) ||
            info.player_response || info.playerResponse || info.embedded_player_response);
        return this.parseJSON(source, 'player_response', player_response);
    };
    UtilsService.prototype.cutAfterJSON = function (mixedJson) {
        var open;
        var close;
        if (mixedJson[0] === '[') {
            open = '[';
            close = ']';
        }
        else if (mixedJson[0] === '{') {
            open = '{';
            close = '}';
        }
        if (!open) {
            throw new Error("Can't cut unsupported JSON (need to begin with [ or { ) but got: " + mixedJson[0]);
        }
        // States if the loop is currently in a string
        var isString = false;
        // Current open brackets to be closed
        var counter = 0;
        var i;
        for (i = 0; i < mixedJson.length; i++) {
            // Toggle the isString boolean when leaving/entering string
            if (mixedJson[i] === '"' && mixedJson[i - 1] !== '\\') {
                isString = !isString;
                continue;
            }
            if (isString)
                continue;
            if (mixedJson[i] === open) {
                counter++;
            }
            else if (mixedJson[i] === close) {
                counter--;
            }
            // All brackets have been closed, thus end of JSON is reached
            if (counter === 0) {
                // Return the cut JSON
                return mixedJson.substr(0, i + 1);
            }
        }
        // We ran through the whole string and ended up with an unclosed bracket
        throw Error("Can't cut unsupported JSON (no matching closing bracket found)");
    };
    /*
    * Extract string inbetween another.
    */
    UtilsService.prototype.between = function (haystack, left, right) {
        var pos;
        if (left instanceof RegExp) {
            var match = haystack.match(left);
            if (!match) {
                return '';
            }
            pos = match.index + match[0].length;
        }
        else {
            pos = haystack.indexOf(left);
            if (pos === -1) {
                return '';
            }
            pos += left.length;
        }
        haystack = haystack.slice(pos);
        pos = haystack.indexOf(right);
        if (pos === -1) {
            return '';
        }
        haystack = haystack.slice(0, pos);
        return haystack;
    };
    UtilsService.prototype.parseJSON = function (source, varName, json) {
        if (!json || typeof json === 'object') {
            return json;
        }
        else {
            try {
                json = json.replace(jsonClosingChars, '');
                return JSON.parse(json);
            }
            catch (err) {
                throw Error("Error parsing " + varName + " in " + source + ": " + err.message);
            }
        }
    };
    UtilsService.prototype.getHTML5player = function (body) {
        var html5playerRes = /<script\s+src="([^"]+)"(?:\s+type="text\/javascript")?\s+name="player_ias\/base"\s*>|"jsUrl":"([^"]+)"/
            .exec(body);
        return html5playerRes ? html5playerRes[1] || html5playerRes[2] : null;
    };
    return UtilsService;
}());
exports.UtilsService = UtilsService;
