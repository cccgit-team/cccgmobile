"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatUtilsService = void 0;
var formats_json_1 = __importDefault(require("./formats.json"));
var utils_service_1 = require("./functions/utils.service");
var audioEncodingRanks = [
    'mp4a',
    'mp3',
    'vorbis',
    'aac',
    'opus',
    'flac',
];
var videoEncodingRanks = [
    'mp4v',
    'avc1',
    'Sorenson H.283',
    'MPEG-4 Visual',
    'VP8',
    'VP9',
    'H.264',
];
var FormatUtilsService = /** @class */ (function () {
    function FormatUtilsService() {
    }
    /**
     * @param {Object} format
     * @returns {Object}
     */
    FormatUtilsService.prototype.addFormatMeta = function (format) {
        var utilsService = new utils_service_1.UtilsService();
        // @ts-ignore
        format = Object.assign({}, formats_json_1.default[format.itag], format);
        format.hasVideo = !!format.qualityLabel;
        format.hasAudio = !!format.audioBitrate;
        format.container = format.mimeType ?
            format.mimeType.split(';')[0].split('/')[1] : null;
        format.codecs = format.mimeType ?
            utilsService.between(format.mimeType, 'codecs="', '"') : null;
        format.videoCodec = format.hasVideo && format.codecs ?
            format.codecs.split(', ')[0] : null;
        format.audioCodec = format.hasAudio && format.codecs ?
            format.codecs.split(', ').slice(-1)[0] : null;
        format.isLive = /\bsource[/=]yt_live_broadcast\b/.test(format.url);
        format.isHLS = /\/manifest\/hls_(variant|playlist)\//.test(format.url);
        format.isDashMPD = /\/manifest\/dash\//.test(format.url);
        return format;
    };
    /**
     * Sort formats by a list of functions.
     *
     * @param {Object} a
     * @param {Object} b
     * @param {Array.<Function>} sortBy
     * @returns {number}
     */
    FormatUtilsService.prototype.sortFormatsBy = function (a, b, sortBy) {
        var res = 0;
        for (var _i = 0, sortBy_1 = sortBy; _i < sortBy_1.length; _i++) {
            var fn = sortBy_1[_i];
            res = fn(b) - fn(a);
            if (res !== 0) {
                break;
            }
        }
        return res;
    };
    /**
     * Sort formats from highest quality to lowest.
     *
     * @param {Object} a
     * @param {Object} b
     * @returns {number}
     */
    FormatUtilsService.prototype.sortFormatsByVideo = function (a, b) {
        var sortBy = [
            function (format) { return +(format.hasVideo && format.hasAudio); },
            function (format) {
                return +(format.contentLength > 0);
            },
            function (format) {
                // tslint:disable-next-line:radix
                return parseInt(format.qualityLabel);
            },
            function (format) {
                return format.bitrate || 0;
            },
            function (format) {
                return videoEncodingRanks.findIndex(function (enc) { return format.codecs && format.codecs.includes(enc); });
            },
        ];
        var res = 0;
        for (var _i = 0, sortBy_2 = sortBy; _i < sortBy_2.length; _i++) {
            var fn = sortBy_2[_i];
            res = fn(b) - fn(a);
            if (res !== 0) {
                break;
            }
        }
        return res;
    };
    FormatUtilsService.prototype.sortFormatsByAudio = function (a, b) {
        var sortBy = [
            function (format) {
                return +(format.contentLength > 0);
            },
            function (format) { return +(!format.hasVideo && format.hasAudio); },
            function (format) {
                // tslint:disable-next-line:radix
                return parseInt(format.qualityLabel);
            },
            function (format) {
                return format.audioBitrate || 0;
            },
            function (format) {
                return audioEncodingRanks.findIndex(function (enc) { return format.codecs && format.codecs.includes(enc); });
            },
        ];
        var res = 0;
        for (var _i = 0, sortBy_3 = sortBy; _i < sortBy_3.length; _i++) {
            var fn = sortBy_3[_i];
            res = fn(b) - fn(a);
            if (res !== 0) {
                break;
            }
        }
        return res;
    };
    return FormatUtilsService;
}());
exports.FormatUtilsService = FormatUtilsService;
