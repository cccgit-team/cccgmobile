"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicInfoService = void 0;
var validation_service_1 = require("./validation.service");
var watch_json_service_1 = require("./functions/watch-json.service");
var watch_html_service_1 = require("./functions/watch-html.service");
var video_info_service_1 = require("./functions/video-info.service");
var unrecoverable_error_1 = require("./errors/unrecoverable-error");
var BasicInfoService = /** @class */ (function () {
    function BasicInfoService(httpClient) {
        this.httpClient = httpClient;
        this.retryOptions = {
            maxRedirects: 10,
            maxRetries: 0,
            maxReconnects: 0,
            backoff: { inc: 100, max: 10000 },
        };
    }
    BasicInfoService.prototype.getBasicInfo = function (id, options) {
        return __awaiter(this, void 0, void 0, function () {
            var watchJsonService, watchHtmlService, videoInfoService, info, additional;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        watchJsonService = new watch_json_service_1.WatchJsonService(this.httpClient);
                        watchHtmlService = new watch_html_service_1.WatchHtmlService(this.httpClient);
                        videoInfoService = new video_info_service_1.VideoInfoService(this.httpClient);
                        return [4 /*yield*/, this.pipeline([id, options], this.retryOptions, [
                                watchJsonService.getJSONWatchPage,
                                watchHtmlService.getWatchHTMLPage,
                                videoInfoService.getVideoInfoPage
                            ], this.httpClient)];
                    case 1:
                        info = _a.sent();
                        Object.assign(info, {
                            formats: this.parseFormats(info.player_response),
                        });
                        additional = {
                            // Give the standard link to the video.
                            video_url: 'https://www.youtube.com/watch?v=' + id,
                        };
                        info.videoDetails = Object.assign({}, info.player_response && info.player_response.microformat &&
                            info.player_response.microformat.playerMicroformatRenderer, info.player_response && info.player_response.videoDetails, additional);
                        return [2 /*return*/, info];
                }
            });
        });
    };
    BasicInfoService.prototype.parseFormats = function (playerResponse) {
        var formats = [];
        if (playerResponse.streamingData) {
            formats = formats
                .concat(playerResponse.streamingData.formats || [])
                .concat(playerResponse.streamingData.adaptiveFormats || []);
        }
        return formats;
    };
    /**
     * Goes through each endpoint in the pipeline, retrying on failure if the error is recoverable.
     * If unable to succeed with one endpoint, moves onto the next one.
     *
     * @param {Array.<Object>} args
     * @param {Function} validate
     * @param {Object} retryOptions
     * @param {Array.<Function>} endpoints
     * @returns {[Object, Object, Object]}
     */
    BasicInfoService.prototype.pipeline = function (args, retryOptions, endpoints, httpClient) {
        return __awaiter(this, void 0, void 0, function () {
            var validationService, info, _i, endpoints_1, func, newInfo, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validationService = new validation_service_1.ValidationService();
                        _i = 0, endpoints_1 = endpoints;
                        _a.label = 1;
                    case 1:
                        if (!(_i < endpoints_1.length)) return [3 /*break*/, 6];
                        func = endpoints_1[_i];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.retryFunc(func, args, retryOptions, httpClient)];
                    case 3:
                        newInfo = _a.sent();
                        newInfo.player_response.videoDetails = this.assign(info && info.player_response
                            && info.player_response.videoDetails, newInfo.player_response.videoDetails);
                        newInfo.player_response = this.assign(info && info.player_response, newInfo.player_response);
                        info = this.assign(info, newInfo);
                        if (validationService.validate(info)) {
                            return [3 /*break*/, 6];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        if (err_1 instanceof unrecoverable_error_1.UnrecoverableError || func === endpoints[endpoints.length - 1]) {
                            throw err_1;
                        }
                        else {
                            // tslint:disable-next-line:no-console
                            console.log(err_1);
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, info];
                }
            });
        });
    };
    /**
     * Given a function, calls it with `args` until it's successful,
     * or until it encounters an unrecoverable error.
     * Currently, any error from miniget is considered unrecoverable. Errors such as
     * too many redirects, invalid URL, status code 404, status code 502.
     *
     * @param {Function} func
     * @param {Array.<Object>} args
     * @param {Object} options
     * @param {number} options.maxRetries
     * @param {Object} options.backoff
     * @param {number} options.backoff.inc
     */
    BasicInfoService.prototype.retryFunc = function (func, args, retryOptions, httpClient) {
        return __awaiter(this, void 0, void 0, function () {
            var currentTry, result, _loop_1, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentTry = 0;
                        _loop_1 = function () {
                            var err_2, wait_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 2, , 4]);
                                        return [4 /*yield*/, func.apply(void 0, __spreadArray(__spreadArray([], args), [httpClient]))];
                                    case 1:
                                        result = _b.sent();
                                        return [2 /*return*/, "break"];
                                    case 2:
                                        err_2 = _b.sent();
                                        if (err_2 instanceof unrecoverable_error_1.UnrecoverableError ||
                                            (err_2 && err_2.statusCode < 500) || currentTry >= retryOptions.maxRetries) {
                                            throw err_2;
                                        }
                                        else {
                                            // tslint:disable-next-line:no-console
                                            console.log(err_2);
                                        }
                                        wait_1 = Math.min(++currentTry * retryOptions.backoff.inc, retryOptions.backoff.max);
                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, wait_1); })];
                                    case 3:
                                        _b.sent();
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        };
                        _a.label = 1;
                    case 1:
                        if (!(currentTry <= retryOptions.maxRetries)) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 3];
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Like Object.assign(), but ignores `null` and `undefined` from `source`.
     *
     * @param {Object} target
     * @param {Object} source
     * @returns {Object}
     */
    BasicInfoService.prototype.assign = function (target, source) {
        if (!target || !source) {
            return target || source;
        }
        for (var _i = 0, _a = Object.entries(source); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (value !== null && value !== undefined) {
                target[key] = value;
            }
        }
        return target;
    };
    return BasicInfoService;
}());
exports.BasicInfoService = BasicInfoService;
